version: 2.1
orbs:
  orb-tools: circleci/orb-tools@12.0
  core: studion/core@3.0.0
  docker: circleci/docker@2.8.2
  security: {}

filters: &filters
  tags:
    only: /.*/

release-filters: &release-filters
  branches:
    ignore: /.*/
  tags:
    only: /^v[0-9]+\.[0-9]+\.[0-9]+$/

jobs:
  scan_dependencies_prod_npm:
    executor: core/node
    steps:
      - checkout
      - security/scan_dependencies:
          pkg_manager: npm
          pkg_json_dir: ~/project/sample
  scan_dependencies_prod_pnpm:
    executor: core/node
    steps:
      - checkout
      - security/scan_dependencies:
          pkg_manager: pnpm
          pkg_json_dir: ~/project/sample
  scan_dependencies_command:
    executor: core/node
    steps:
      - checkout
      - security/scan_dependencies:
          pkg_manager: npm
          pkg_json_dir: ~/project/sample
          scan_command: |
            #!/bin/bash
            if ! npm audit --audit-level=high; then
              echo "Scan found dependencies with high vulnerability level"
            fi
  scan_dockerfile:
    executor: security/node
    steps:
      - checkout
      - security/scan_dockerfile:
          dockerfile_dir: ./sample
  generate_sbom_and_assess_image:
    machine:
      image: ubuntu-2204:current
    steps:
      - checkout
      - security/install_grype
      - security/install_syft
      - security/install_trivy
      - docker/build:
          image: security-sample
          tag: v1
          path: ./sample
          docker-context: ./sample
      - run:
          name: Export image as env
          command: echo "export IMAGE_TO_USE=docker.io/security-sample:v1" >> "${BASH_ENV}"
      - security/generate_sbom:
          image: ${IMAGE_TO_USE}
          out_path: /tmp/sample-sbom.json
      - run:
          name: Check SBOM output
          command: |
            if [ ! -f "/tmp/sample-sbom.json" ]; then
              echo "SBOM output not found"
              exit 1
            fi
      - security/assess_image:
          image: docker.io/security-sample:v1
          severity: critical
          report_path: /tmp/sample-vuln-report.json
      - run:
          name: Check vulnerability report
          command: |
            if [ ! -f "/tmp/sample-vuln-report.json" ]; then
              echo "Vulnerability report not found"
              exit 1
            fi
      - run:
          name: Cleanup
          command: |
            rm -f /tmp/sample-sbom.json
            rm -f /tmp/sample-vuln-report.json
  install_trivy:
    executor: core/node
    steps:
      - security/install_trivy:
          version: v0.59.1
      - run:
          name: Validate installation
          command: |
            if ! trivy --version | grep -q "0.59.1"; then
              echo "Failed to install chosen trivy version"
              exit 1
            fi
  install_syft:
    executor: core/node
    steps:
      - security/install_syft:
          version: v1.25.1
      - run:
          name: Validate installation
          command: |
            if ! syft --version | grep -q "1.25.1"; then
              echo "Failed to install chosen syft version"
              exit 1
            fi
  install_grype:
    executor: core/node
    steps:
      - security/install_grype:
          version: v0.92.1
      - run:
          name: Validate installation
          command: |
            if ! grype --version | grep -q "0.92.1"; then
              echo "Failed to install chosen grype version"
              exit 1
            fi
  install_semgrep:
    machine:
      image: ubuntu-2404:current
    steps:
      - security/install_semgrep:
          version: v1.121.0
      - run:
          name: Validate installation
          command: |
            if ! semgrep --version | grep -q "1.121.0"; then
              echo "Failed to install chosen semgrep version"
              exit 1
            fi
  install_gitleaks:
    executor: core/node
    steps:
      - security/install_gitleaks:
          version: v8.25.1
      - run:
          name: Validate installation
          command: |
            if ! gitleaks --version | grep -q "8.25.1"; then
              echo "Failed to install chosen gitleaks version"
              exit 1
            fi

workflows:
  test-deploy:
    jobs:
      - scan_dependencies_prod_npm:
          filters: *filters
      - scan_dependencies_prod_pnpm:
          filters: *filters
      - scan_dependencies_command:
          filters: *filters
      - scan_dockerfile:
          filters: *filters
      - generate_sbom_and_assess_image:
          filters: *filters
      - security/detect_secrets_dir:
          name: detect_secrets_dir
          filters: *filters
      - security/detect_secrets_git:
          name: detect_secrets_git_base_revision
          base_revision: <<pipeline.git.base_revision>>
          filters: *filters
      - security/detect_secrets_git:
          name: detect_secrets_git_same_revision
          base_branch: <<pipeline.git.branch>>
          base_revision: <<pipeline.git.revision>>
          filters: *filters
      - security/detect_secrets_git:
          name: detect_secrets_git_invalid_revision
          base_branch: <<pipeline.git.branch>>
          base_revision: ec9bf83ad5045208d15f2ec2c0ce4fba8cd7118f
          filters: *filters
      - security/detect_secrets_git:
          name: detect_secrets_git_no_revision
          base_branch: <<pipeline.git.branch>>
          filters: *filters
      - security/analyze_code_diff:
          name: analyze_code_diff
          filters: *filters
      - security/analyze_code_full:
          name: analyze_code_full
          rules: p/cwe-top-25
          filters: *filters
      - install_trivy:
          filters: *filters
      - install_syft:
          filters: *filters
      - install_grype:
          filters: *filters
      - install_semgrep:
          filters: *filters
      - install_gitleaks:
          filters: *filters
      - orb-tools/pack:
          filters: *release-filters
      - orb-tools/publish:
          orb_name: studion/security
          vcs_type: << pipeline.project.type >>
          pub_type: production
          requires:
            - orb-tools/pack
            - scan_dependencies_prod_npm
            - scan_dependencies_prod_pnpm
            - scan_dependencies_command
            - scan_dockerfile
            - generate_sbom_and_assess_image
            - detect_secrets_dir
            - detect_secrets_git_base_revision
            - analyze_code_diff
            - analyze_code_full
            - install_trivy
            - install_syft
            - install_grype
            - install_semgrep
            - install_gitleaks
          context: orb-publishing
          filters: *release-filters
